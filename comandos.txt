inicializar proyecto nodejs:
npm init -y

instalar expressjs dentro de carpeta:
npm install express

Crea un archivo llamado app.js. Este archivo será el punto de entrada de tu aplicación Express:

inicializar servidor: 
node app.js

instalar dotenv para variables de entorno:
npm install dotenv

instalar jwt para autenticacion en api:
npm install bcrypt jsonwebtoken cors

lineas de codigo para configuracion: 

const express = require('express');
const cors = require('cors');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');

const app = express();
const port = 3001;

app.use(cors());
app.use(express.json());


instalar mysql12:
npm install mysql2

hacer la conexion:
const express = require('express');
const mysql = require('mysql2/promise');

const app = express();
const port = 3000;

// Configuración de conexión a la base de datos
const dbConfig = {
  host: 'localhost', // o la URL de tu servidor de base de datos
  user: 'tu_usuario', // tu nombre de usuario de MySQL
  password: 'tu_contraseña', // tu contraseña de MySQL
  database: 'nombre_de_tu_base_de_datos', // el nombre de tu base de datos
};

app.use(express.json());

// Endpoint de ejemplo para probar la conexión
app.get('/test-connection', async (req, res) => {
  try {
    const connection = await mysql.createConnection(dbConfig);
    await connection.connect();
    console.log('Conectado a la base de datos MySQL');
    // Realizar una consulta de prueba
    const [rows] = await connection.query('SELECT 1 + 1 AS solution');
    res.json({ solution: rows[0].solution });
    await connection.end();
  } catch (error) {
    console.error('Error al conectar a la base de datos:', error);
    res.status(500).send('Error al conectar a la base de datos');
  }
});

app.listen(port, () => {
  console.log(`Servidor ejecutándose en http://localhost:${port}`);
});

instalar sequelize para trabajar con migraciones:
npm install sequelize sequelize-cli mysql2

inicializar sequelize(esto creara las carpetas migrations, config y models):
npx sequelize-cli init

crear base de datos: 
npx sequelize-cli db:create

para crear modelos:
npx sequelize-cli model:generate --name User --attributes firstName:string,lastName:string,email:string

ejecutar migraciones:
npx sequelize-cli db:migrate

deshacer ultima migracion:
npx sequelize-cli db:migrate:undo

deshacer todas las migraciones:
npx sequelize-cli db:migrate:undo:all

deshacer migracion especifica:
npx sequelize-cli db:migrate:undo:all --to XXXXXXXXXXXXXX-nombre-de-tu-migracion.js


